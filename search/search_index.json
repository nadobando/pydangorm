{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p><code>pydangorm</code> is a robust and user-friendly asynchronous ORM (Object-Relational Mapping) system tailored for ArangoDB, a powerful multi-model NoSQL database.</p> <p><code>pydangorm</code> is inspired by <code>SQLAlchemy</code>, a popular ORM system for SQL databases, It aims to provide a similar experience</p>"},{"location":"#main-libraries","title":"Main Libraries","text":"<p><code>pydangorm</code> is built upon the foundation of two primary libraries:</p> <ul> <li> <p>pydantic: An extremely popular data validation and settings management library for Python. In <code>pydangorm</code>,   pydantic is utilized to provide robust model definitions and validation, ensuring that data interactions are clean,   consistent, and error-free.</p> </li> <li> <p>aioarango: An asynchronous driver for ArangoDB. It powers the core interactions with the ArangoDB database, making   it possible for <code>pydangorm</code> to support asynchronous database operations, ensuring optimized I/O-bound tasks.</p> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Database Modeling: Easily define, validate, and interact with your database models. This includes   support for both vertex and edge models (<code>VertexModel</code> and <code>EdgeModel</code>).</p> </li> <li> <p>Pythonic Query Building: Constructing queries for ArangoDB in a SQLAlchemy way. With a Pythonic API, you can   effortlessly build complex queries to retrieve or manipulate your data.</p> </li> <li> <p>Session Management: Manage your database sessions and connections with ease. Whether it's connecting to the   database or handling transactions, <code>pydangorm</code> has got you covered.</p> </li> <li> <p>Collection Management: From creating indices to truncating collections, manage all your collection operations   without hassle.</p> </li> <li> <p>Asynchronous Support: <code>pydangorm</code> is designed for the modern web. With full asynchronous support, your I/O-bound   database tasks will be lightning fast, ensuring your applications remain responsive and scalable.</p> </li> <li> <p>Lazy Loading: <code>pydangorm</code> supports lazy loading, ensuring that data is only fetched when needed, optimizing   performance and reducing memory usage.</p> </li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li> Support for <code>AQL Query Building including trversal</code></li> <li> Support for <code>VertexModel</code> and <code>EdgeModel</code></li> <li> Support for <code>VertexModel</code> relationships via <code>EdgeModel</code></li> <li> Support for <code>Model Saving and Updating (single instance)</code></li> <li> Support for <code>Model Saving and Updating (with relations)</code></li> <li> Support for <code>Model Deletion (single instance)</code></li> <li> Support for <code>Model Fetching (single instance)</code></li> <li> Support for <code>Model Fetching with relations and traversal</code></li> <li> Support for <code>Model Graph CRUD Operations</code></li> <li> Support for <code>Model Deletion Cascade</code></li> <li> Support for <code>pydantic</code> <code>v2.0</code></li> <li> Support for <code>Model Back Population</code></li> </ul>"},{"location":"#contributions","title":"Contributions","text":"<p>We're actively looking for contributors to help improve <code>pydangorm</code> and expand its capabilities.</p> <p>Whether you're a seasoned developer or just starting out, your contributions are valuable to us.</p> <p>If you have ideas for new features, optimizations, or simply want to fix a bug, please check our contribution guidelines or reach out. Together, we can make <code>pydangorm</code> the best ArangoDB ORM for Python!</p>"},{"location":"installation/","title":"Installation","text":"<p>Get started with <code>pydangorm</code> by installing it via pip:</p>"},{"location":"installation/#pip","title":"pip","text":"<pre><code>pip install pydangorm\n</code></pre>"},{"location":"installation/#poetry","title":"poetry","text":"<pre><code>poetry add pydangorm\n</code></pre>"},{"location":"quickstart/","title":"Tutorial","text":""},{"location":"quickstart/#basic-setup","title":"Basic Setup","text":"<p>Before you can interact with your ArangoDB database, you'll need to set up a connection. Here's a basic example:</p> Session Setup<pre><code>from aioarango import ArangoClient\nfrom pydango import PydangoSession\nclient = ArangoClient()  # Add your connection parameters here\nsession = PydangoSession(\nclient=client,\ndatabase=\"your_database_name\"\n# Add your database parameters here\n)\n</code></pre>"},{"location":"quickstart/#defining-models","title":"Defining Models","text":"<p>With <code>pydangorm</code>, you can easily define vertex and edge models:</p> <pre><code>from typing import Annotated\nimport datetime\nfrom pydango.indexes import PersistentIndex\nfrom pydango import (\nVertexModel,\nEdgeModel,\nEdgeCollectionConfig,\nVertexCollectionConfig,\nRelation,\n)\nclass Visited(EdgeModel):\nrating: int\non_date: datetime.date\nclass Collection(EdgeCollectionConfig):\nname = \"visited\"\nindexes = [\nPersistentIndex(fields=[\"rating\"]),\n]\nclass LivesIn(EdgeModel):\nsince: datetime.datetime\nclass Collection(EdgeCollectionConfig):\nname = \"lives_in\"\nclass City(VertexModel):\nname: str\npopulation: int\nclass Collection(VertexCollectionConfig):\nname = \"cities\"\nindexes = [PersistentIndex(fields=[\"name\"])]\nclass Person(VertexModel):\nname: str\nage: int\nlives_in: Annotated[City, Relation[LivesIn]]\nvisited: Annotated[list[City], Relation[Visited]]\nclass Collection(VertexCollectionConfig):\nname = \"people\"\nindexes = [\nPersistentIndex(fields=[\"name\"]),\nPersistentIndex(fields=[\"age\"]),\n]\n</code></pre>"},{"location":"quickstart/#crud-operations","title":"CRUD Operations","text":"<p>Perform basic CRUD operations using the models:</p> <pre><code># Create a new person\nasync def async_application():\nperson = Person(name=\"Alice\", age=30)\nperson.lives_in = City(name=\"Buenos Aires\", population=16_500_000)\nperson.visited = [City(name=\"San Francisco\", population=800_000)]\nperson.edges.lives_in = LivesIn(since=datetime.datetime.now())\nperson.edges.visited = [Visited(rating=5, on_date=datetime.date.today())]\nawait session.save(person)\n# Read a person by their ID\nretrieved_person = await session.get(Person, person.id)\n# Update the person's age\nperson.age = 31\nawait session.save(person)\n</code></pre>"},{"location":"quickstart/#running-queries","title":"Running Queries","text":""},{"location":"quickstart/#simple-query","title":"Simple Query","text":"<p>Construct and execute a simple query to retrieve all people over the age of 25:</p> <pre><code>from pydango.orm import for_\nquery = for_(Person).filter(Person.age &gt; 25).return_(Person)\npeople_over_25 = await session.execute(query)\n</code></pre>"},{"location":"quickstart/#traversal-query","title":"Traversal Query","text":"<p>Construct and execute a simple query to cities visited by people who visited the same cities of a person:</p> <pre><code>from pydango.orm import traverse\nfrom pydango import TraversalDirection\nperson_visited_cities = traverse(\nPerson,\nedges=[Person.visited],\nstart=person.id,\ndepth=(1, 2),\ndirection=TraversalDirection.INBOUND,\n).return_(Person)\n</code></pre>"},{"location":"session/","title":"Session","text":""},{"location":"session/#pydangosession","title":"<code>PydangoSession</code>","text":""},{"location":"session/#overview","title":"Overview","text":"<p><code>PydangoSession</code> stands as the primary gateway for ORM-based interactions with ArangoDB. It wraps essential functionalities, making database operations like initialization, querying, and document management seamless and intuitive.</p>"},{"location":"session/#initialization","title":"Initialization:","text":"<p>The class can be instantiated with:</p> <ul> <li>a pre-configured StandardDatabase</li> <li>by providing details like client, database, username, and password.</li> </ul> <p>Tip</p> <p>Before using the session, ensure it's initialized by calling the initialize() method.</p>"},{"location":"session/#methods","title":"Methods:","text":"<ul> <li><code>initialize</code>: Set up the session. Mandatory before performing database operations.</li> <li><code>create_indexes</code>: Define and set up indexes for your models.</li> <li><code>save</code>: Persist a document. The strategy parameter dictates the save behavior, whether to update   existing or insert new.</li> <li><code>get</code>: Fetch a document based on its model type and ID.</li> <li><code>execute</code>: Directly run AQL queries.</li> </ul>"},{"location":"orm/base/","title":"Base","text":""},{"location":"orm/base/#basearangomodel","title":"<code>BaseArangoModel</code>","text":""},{"location":"orm/base/#overview","title":"Overview","text":"<p>The <code>BaseArangoModel</code> class forms the foundation for defining models in the <code>pydango</code> ORM that represent ArangoDB entities. It provides core attributes, methods, and configurations to facilitate interactions with ArangoDB.</p>"},{"location":"orm/base/#attributes","title":"Attributes","text":"<ol> <li><code>id</code>: An optional unique identifier for the ArangoDB entity.</li> <li><code>key</code>: An optional unique key specific to ArangoDB entities.</li> <li><code>rev</code>: An optional revision attribute used in ArangoDB for versioning and conflict resolution.</li> </ol>"},{"location":"orm/base/#nested-classes","title":"Nested Classes","text":"<ul> <li> <p><code>Config</code>: Specifies configurations for the Pydantic model. It fine-tunes model behavior, especially regarding data   validation and serialization.</p> </li> <li> <p><code>Collection</code>: Offers collection-specific configurations for the model, customizing its behavior and settings in   relation to ArangoDB collections.</p> </li> </ul>"},{"location":"orm/base/#methods","title":"Methods","text":"<ol> <li>save_dict(self): An abstract method to be implemented in derived classes. It outlines how the model data should    be saved or serialized.</li> </ol> <p>This documentation offers a developer-centric guide to the <code>BaseArangoModel</code> class. It is designed to help developers understand and use the class effectively. Adjustments can be made based on further content or specific requirements. Would you like to proceed with another section or topic?</p>"},{"location":"orm/collection/","title":"Collection Config","text":""},{"location":"orm/collection/#collectionconfig","title":"<code>CollectionConfig</code>","text":"<p>The <code>CollectionConfig</code> class provides configuration specific to an ArangoDB collection. It defines attributes that represent various settings and configurations for a collection in ArangoDB, allowing developers to fine-tune collection behavior.</p>"},{"location":"orm/collection/#attributes","title":"Attributes","text":"<ul> <li><code>name</code>: The name of the ArangoDB collection.</li> <li><code>type</code>: The type of the collection, represented as an enum (<code>CollectionType</code>).</li> <li><code>sync</code>: A boolean indicating whether to synchronize the collection. Default is <code>False</code>.</li> <li><code>system</code>: A boolean indicating if the collection is a system collection. Default is <code>False</code>.</li> <li><code>key_generator</code>: Specifies the type of key generation strategy. Possible values are \"traditional\" and \"</li> <li><code>autoincrement</code>\". Default is \"traditional\".</li> <li><code>user_keys</code>: A boolean indicating whether user-generated keys are allowed. Default is <code>False</code>.</li> <li><code>key_increment</code>: An integer specifying the increment value for auto-incrementing keys.</li> <li><code>key_offset</code>: An integer specifying the offset value for auto-incrementing keys.</li> <li><code>shard_fields</code>: A list of fields that determine the sharding strategy.</li> <li><code>shard_count</code>: An integer indicating the number of shards for the collection.</li> <li><code>replication_factor</code>: An integer specifying the replication factor for the collection.</li> <li><code>shard_like</code>: A string representing another collection to use as a sharding reference. Available in enterprise</li> <li>editions only.</li> <li><code>sync_replication</code>: A boolean indicating whether to synchronize replication.</li> <li><code>enforce_replication_factor</code>: A boolean indicating whether to enforce the specified replication factor.</li> <li><code>sharding_strategy</code>: Specifies the sharding strategy. Possible values include \"community-compat\", \"   enterprise-smart-edge-compat\", and \"enterprise-smart-edge\".</li> <li><code>smart_join_attribute</code>: A string specifying the attribute used for smart joins. Available in enterprise editions   only.</li> <li><code>write_concern</code>: An integer indicating the level of write concern for the collection.</li> <li><code>sync_schema</code>: A boolean indicating whether to synchronize the schema. Default is <code>False</code>.</li> <li><code>indexes</code>: A sequence of index configurations <code>Indexes</code> for the collection. Default is an empty list.</li> </ul>"},{"location":"orm/collection/#tips-for-developers","title":"Tips for Developers","text":""},{"location":"orm/collection/#indexes","title":"Indexes","text":""},{"location":"orm/collection/#overview","title":"Overview","text":"<p>The indexes module offers a suite of classes to define and work with various types of indexes in ArangoDB collections, optimizing query performance.</p>"},{"location":"orm/collection/#indexes_1","title":"Indexes","text":"<ul> <li><code>GeoIndex</code>: Define geospatial indexes for querying based on geographical locations.</li> <li><code>HashIndex</code>: Craft hash indexes for rapid equality-based lookups.</li> <li><code>SkipListIndex</code>: Ideal for range queries, providing a range-based indexing mechanism.</li> <li><code>FullTextIndex</code>: Optimize your text-based queries with this full-text search index.</li> <li><code>PersistentIndex</code>: Ensures the index remains stored on disk for persistence.</li> <li><code>TTLIndex</code>: Automatically remove documents post a specified time with this Time-To-Live index.</li> </ul> <p>Tip</p> <p>Tips for Developers</p> <ol> <li>When setting up a collection in ArangoDB through the ORM, utilize the <code>CollectionConfig</code> class to customize    collection behavior.</li> <li>Ensure that the <code>name</code> attribute is set, as it determines the name of the collection in ArangoDB.</li> <li>If using the enterprise edition of ArangoDB, consider leveraging the enterprise-specific attributes like <code>shard_like</code>    and <code>smart_join_attribute</code> for advanced configurations.</li> <li>Adjust the <code>indexes</code> attribute to define specific indexes on the collection for optimized queries.</li> <li>Determine the nature of your queries to select the appropriate index type. For instance, use GeoIndex for location-based    queries and FullTextIndex for textual searches.</li> <li>Always specify the fields attribute when defining an index, as it determines which fields in the collection the index    applies to.</li> <li>Consider using the <code>in_background</code> attribute if you want to create the index without blocking other operations.</li> </ol>"},{"location":"orm/edge/","title":"Edge","text":""},{"location":"orm/edge/#edgemodel","title":"<code>EdgeModel</code>","text":"<p>Metaclass: <code>EdgeMeta</code></p> <p>Subclasses:</p> <ul> <li><code>BaseArangoModel</code></li> </ul>"},{"location":"orm/edge/#overview","title":"Overview","text":"<p>The <code>EdgeModel</code> class forms the foundational representation of an edge (relationship) in ArangoDB within the pydango ORM. It equips developers with the necessary attributes and methods to define and manage edges effectively.</p>"},{"location":"orm/edge/#attributes","title":"Attributes","text":"<ul> <li><code>id</code>: An optional unique identifier for the ArangoDB edge.</li> <li><code>key</code>: An optional unique key specific to ArangoDB edges.</li> <li><code>rev</code>: An optional revision attribute used in ArangoDB for versioning and conflict resolution.</li> <li><code>from_</code>: Represents the starting vertex of the edge. Aliased to <code>FROM</code> for ArangoDB compatibility.</li> <li><code>to</code>: Depicts the target vertex of the edge. Aliased to <code>TO</code> for compatibility.</li> <li><code>Config</code>: Inherits from <code>BaseConfig</code>, providing <code>Pydantic</code> model-specific configurations.</li> <li><code>Collection</code>: A subclass that inherits from <code>EdgeCollectionConfig</code>, offering edge-specific collection configurations   for the  ORM.</li> </ul>"},{"location":"orm/edge/#edgecollectionconfig","title":"<code>EdgeCollectionConfig</code>","text":"<p>Subclasses:</p> <ul> <li><code>CollectionConfig</code></li> </ul>"},{"location":"orm/edge/#overview_1","title":"Overview","text":"<p>The <code>EdgeCollectionConfig</code> class provides configurations tailored specifically for edge collections in ArangoDB. By extending the base CollectionConfig,</p>"},{"location":"orm/query/","title":"Query","text":""},{"location":"orm/query/#querypy","title":"<code>query.py</code>","text":"<p>The module within the orm sub-package provides functionalities and structures for ORM-based querying in relation to ArangoDB. It integrates with various parts of the ORM and aids in constructing and executing queries.</p>"},{"location":"orm/query/#key-features","title":"Key Features","text":"<ul> <li>Automatic binding</li> <li><code>AQL</code> injection protection</li> <li>query building</li> </ul>"},{"location":"orm/query/#ormquery","title":"<code>ORMQuery</code>","text":"<p>The <code>ORMQuery</code> class is a subclass of <code>AQLQuery</code>. It provides a Pythonic API for constructing queries for ArangoDB.</p>"},{"location":"orm/query/#builder-helpers","title":"builder helpers","text":""},{"location":"orm/query/#for_","title":"<code>for_()</code>","text":"<p>the <code>for_()</code> method is used to specify the target vertex/edge collection of the query.</p> <pre><code>from pydango.orm import for_\nfor_(User).filter(User.name == \"John Doe\").return_(User)\n</code></pre>"},{"location":"orm/query/#traverse","title":"<code>traverse()</code>","text":"<pre><code>from pydango.orm import traverse\nfrom pydango.query.expressions import IteratorExpression\nfrom pydango.query import TraversalDirection\nedge = IteratorExpression()\ntraverse(\n(User, edge),\nedges={\"friends\"},\nstart=\"people/1\",\ndepth=(0, 1),\ndirection=TraversalDirection.OUTBOUND,\n).filter(User.name == \"John Doe\").return_(User)\n</code></pre>"},{"location":"orm/vertex/","title":"Vertex","text":""},{"location":"orm/vertex/#vertexmodel","title":"<code>VertexModel</code>","text":"<p>Metaclass: <code>VertexMeta</code></p> <p>Subclasses: <code>BaseArangoModel</code></p>"},{"location":"orm/vertex/#overview","title":"Overview","text":"<p>The <code>VertexModel</code> class represents a vertex in the context of the <code>pydango</code> ORM. It provides essential attributes, methods, and configurations for defining and working with vertices in ArangoDB.</p>"},{"location":"orm/vertex/#attributes","title":"Attributes","text":"<ul> <li><code>id</code>: An optional unique identifier for the ArangoDB vertex.</li> <li><code>key</code>: An optional unique key specific to ArangoDB vertices.</li> <li><code>rev</code>: An optional revision attribute used in ArangoDB for versioning and conflict resolution.</li> <li><code>edges</code>: Represents the edges related to this vertex. Allows for dot-notation access to related edges.</li> <li><code>Config</code>: Inherits from <code>BaseConfig</code>, providing Pydantic model-specific configurations.</li> <li><code>Collection</code>: Inherits from <code>VertexCollectionConfig</code>, offering vertex-specific collection configurations.</li> </ul>"},{"location":"orm/vertex/#collection","title":"Collection","text":""},{"location":"orm/vertex/#vertexcollectionconfig","title":"<code>VertexCollectionConfig</code>","text":"<p>Subclasses:</p> <ul> <li><code>CollectionConfig</code></li> </ul>"},{"location":"orm/vertex/#overview_1","title":"Overview","text":"<p>The <code>VertexCollectionConfig</code> class provides specific configurations tailored for vertex collections in ArangoDB. It extends the base <code>CollectionConfig</code> with vertex-centric customizations.</p>"},{"location":"orm/vertex2/","title":"Vertex2","text":"<p>Certainly. Let's create the documentation for the <code>vertex.py</code> module in a developer-friendly format.</p>"},{"location":"orm/vertex2/#vertex-module-documentation","title":"Vertex Module Documentation","text":""},{"location":"orm/vertex2/#introduction","title":"Introduction","text":"<p>The <code>vertex.py</code> module is integral to the <code>pydango</code> ORM, providing foundational classes and utilities for representing and working with vertices in ArangoDB.</p>"},{"location":"orm/vertex2/#classes","title":"Classes","text":""},{"location":"orm/vertex2/#1-vertexcollectionconfig","title":"1. VertexCollectionConfig","text":"<ul> <li>Description: Configuration specific to a vertex collection in ArangoDB.</li> <li>Attributes:</li> <li><code>type</code>: Set to <code>CollectionType.NODE</code>, this attribute classifies the collection as a node or vertex collection in     ArangoDB.</li> </ul>"},{"location":"orm/vertex2/#2-vertexmeta-metaclass","title":"2. VertexMeta (Metaclass)","text":"<ul> <li> <p>Description: A custom metaclass for vertex models. It processes namespace information, defines relationships   between vertices, and sets up edge models during the class creation process.</p> </li> <li> <p>Methods:</p> </li> <li> <p><code>_build_edge_to_field_mapping(relationships: Relationships) -&gt; EdgeFieldMapping</code>:</p> <ul> <li>Purpose: Constructs a mapping between edges and fields based on provided relationships.</li> <li>Parameters:</li> <li><code>relationships</code>: Relationship information between vertices.</li> </ul> </li> <li> <p><code>_validate_edges(edge_to_field_mapping: EdgeFieldMapping, namespace: dict) -&gt; None</code>:</p> <ul> <li>Purpose: Validates the constructed edge-to-field mappings.</li> <li>Parameters:</li> <li><code>edge_to_field_mapping</code>: Mapping between edges and fields.</li> <li><code>namespace</code>: Current namespace of the class being processed.</li> </ul> </li> <li> <p><code>_build_model(relationships: Relationships, name: str) -&gt; Model</code>:</p> <ul> <li>Purpose: Constructs a model based on provided relationships and name.</li> <li>Parameters:</li> <li><code>relationships</code>: Relationship information between vertices.</li> <li><code>name</code>: Name for the constructed model.</li> </ul> </li> </ul>"},{"location":"orm/vertex2/#3-vertexmodel","title":"3. VertexModel","text":"<ul> <li> <p>Description: Represents a vertex model in the ORM. It defines and manages vertices and their relationships to   edges.</p> </li> <li> <p>Attributes:</p> </li> <li> <p><code>edges</code>: Represents the edges related to this vertex.</p> </li> <li> <p><code>__edge_to_field_mapping__</code>: A dictionary mapping edges to their respective fields.</p> </li> <li> <p>Methods:</p> </li> <li> <p><code>__init__(self, **data: Any) -&gt; None</code>:</p> <ul> <li>Purpose: Initializes the vertex model.</li> <li>Parameters:</li> <li><code>data</code>: Data to initialize the vertex model with.</li> </ul> </li> <li> <p><code>dict(self, ...) -&gt; dict</code>:</p> <ul> <li>Purpose: Extracts the data from the model in a dictionary format.</li> <li>Parameters:</li> <li>Various parameters to customize the output, such as <code>include</code>, <code>exclude</code>, <code>by_alias</code>, etc.</li> </ul> </li> </ul>"},{"location":"orm/vertex2/#tips-for-developers","title":"Tips for Developers:","text":"<ol> <li>When defining a vertex model, extend the <code>VertexModel</code> class. Use the provided utilities and methods to ensure proper    relationships and data handling.</li> <li>The <code>VertexMeta</code> metaclass processes and sets up relationships during class creation. Ensure that relationships are    defined correctly to leverage the ORM's capabilities.</li> <li>Utilize the <code>VertexModel</code>'s <code>dict</code> method for data extraction and serialization.</li> </ol> <p>This documentation provides an overview and developer-centric guide to the <code>vertex.py</code> module. Adjustments can be made based on further content or specific requirements. Would you like to proceed with another section or topic?</p>"},{"location":"query/expressions/","title":"Expressions","text":""},{"location":"query/expressions/#basic-expressions","title":"Basic Expressions","text":""},{"location":"query/expressions/#collectionexpression","title":"<code>CollectionExpression</code>","text":"<p>Subclasses:</p> <ul> <li><code>IterableExpression</code></li> </ul> <p>Represents ArangoDB collections in AQL queries. It takes a collection name and an optional iterator. It provides methods for accessing fields within the collection and compiles the collection name into its AQL representation.</p>"},{"location":"query/expressions/#literalexpression","title":"<code>LiteralExpression</code>","text":"<p>Represents literal expressions in <code>AQL</code>. Inherits from BindableExpression and have a representation as <code>?</code>, which is likely a placeholder for a value to be bound later.</p>"},{"location":"query/expressions/#fieldexpression","title":"<code>FieldExpression</code>","text":"<p>Represents field accesses in <code>AQL</code> queries. This class handles accessing fields or attributes of documents or objects within queries. It provides functionalities like:</p> <p>Accessing nested fields. Generating proper <code>AQL</code> syntax for field access. Overloaded operators to produce conditional expressions. This allows users to write Pythonic expressions for arithmetic operations (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>) and comparisons (<code>==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>), which get translated into corresponding <code>AQL</code> expressions.</p>"},{"location":"query/expressions/#variableexpression","title":"<code>VariableExpression</code>","text":"<p>Represents variable expressions in <code>AQL</code>. This class allows for dynamic variable names and access to fields within the variable.</p>"},{"location":"query/expressions/#iteratorexpression","title":"<code>IteratorExpression</code>","text":"<p>This class inherits from VariableExpression and represent an iterator in AQL queries. Iterators are used in FOR loops in AQL to iterate over a set of values or documents.</p>"},{"location":"query/expressions/#figurativeexpression","title":"FigurativeExpression","text":"<p>Subclasses:</p> <ul> <li><code>BindableExpression</code></li> <li><code>ReturnableExpression</code></li> </ul> <p>Abstract class for non <code>LiteralExpression</code></p>"},{"location":"query/expressions/#listexpression","title":"<code>ListExpression</code>","text":"<p>Subclasses:</p> <ul> <li><code>BindableExpression</code></li> <li><code>ReturnableExpression</code></li> </ul> <p>Represents lists in AQL. This class can take a variety of item types, including:</p> <ul> <li>query expressions</li> <li>literals</li> <li>mappings</li> <li>sequences</li> <li>basic data types like int, float, str, and bool.</li> </ul> <p>Handles nested structures, converting nested lists into appropriate AQL representations.</p>"},{"location":"query/expressions/#objectexpression","title":"<code>ObjectExpression</code>","text":"<p>Represents objects (like dictionaries or AQL documents) in queries. This class Can take a variety of key-value pairs, including:</p> <ul> <li>query expressions</li> <li>literals</li> <li>mappings</li> <li>sequences</li> <li>basic data types like int, float, str, and bool.</li> </ul> <p>Handles nested structures, converting nested dictionaries and lists into appropriate AQL representations. Possesses a _bind attribute for binding values to the object.</p>"},{"location":"query/expressions/#iterable-expressions","title":"Iterable Expressions","text":""},{"location":"query/expressions/#rangeexpression","title":"<code>RangeExpression</code>","text":"<p>Represents a range in AQL queries, such as specifying a range of numbers. It support both literal values and other expressions for the start and end of the range.</p>"},{"location":"query/expressions/#assignmentexpression","title":"<code>AssignmentExpression</code>","text":"<p>Represents an assignment operation in AQL, like setting a variable's value.</p>"},{"location":"query/expressions/#binary-expressions","title":"Binary Expressions","text":""},{"location":"query/expressions/#binarylogicalexpression","title":"<code>BinaryLogicalExpression</code>","text":"<p>A subclass of ConditionExpression that represents binary logical operations in AQL. The comment suggests it supports operations like <code>&amp;&amp;</code> (AND) and <code>||</code> (OR).</p>"},{"location":"query/expressions/#binaryarithmeticexpression","title":"<code>BinaryArithmeticExpression</code>","text":""},{"location":"query/expressions/#unary-logical-expressions","title":"Unary Logical Expressions","text":"<p>This class might represent unary logical operations, though specific operations aren't immediately clear from this snippet. <code>NOT</code></p>"},{"location":"query/expressions/#notexpression","title":"<code>NotExpression</code>","text":"<p>represents the <code>NOT</code> operation in AQL.</p>"},{"location":"query/expressions/#binarylogicalexpression_1","title":"BinaryLogicalExpression","text":""},{"location":"query/expressions/#andexpression","title":"<code>AndExpression</code>","text":"<p>Subclasses of BinaryLogicalExpression that represent the logical AND (&amp;&amp;) operations, respectively.</p>"},{"location":"query/expressions/#orexpression","title":"<code>OrExpression</code>","text":"<p>represent the logical OR (||) operations.</p>"},{"location":"query/expressions/#conditionexpression","title":"<code>ConditionExpression</code>","text":"<p>Inherits from BinaryExpression and LogicalExpression. This class represent conditional operations in AQL, like comparisons (e.g., <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>). It also supports chaining of conditions using logical operators <code>AND</code> and <code>OR</code>.</p>"},{"location":"query/expressions/#in","title":"<code>In</code>","text":"<p>A subclass of ConditionExpression that represent the <code>IN</code> operation in AQL, where an object is checked if it's part of an iterable.</p>"},{"location":"query/expressions/#arithmetic-expressions","title":"Arithmetic Expressions","text":""},{"location":"query/expressions/#unaryarithmeticexpression","title":"<code>UnaryArithmeticExpression</code>","text":"<p>Inherits from both UnaryExpression and BaseArithmeticExpression. This class represents unary arithmetic operations in AQL. <code>-1</code></p>"},{"location":"query/expressions/#arithmeticexpression","title":"<code>ArithmeticExpression</code>","text":"<p>Inherits from both BinaryExpression and BaseArithmeticExpression. Represents binary arithmetic operations in AQL. It also has overloaded comparison operators to form conditions from arithmetic results.</p>"},{"location":"query/expressions/#query-expressions","title":"Query Expressions","text":""},{"location":"query/expressions/#queryexpression","title":"<code>QueryExpression</code>","text":"<p>An abstract base class that represents an AQL Query.</p>"},{"location":"query/expressions/#subqueryexpression","title":"<code>SubQueryExpression</code>","text":"<p>Represents subqueries in AQL. Subqueries are queries embedded within other queries. This class wraps around another QueryExpression to represent the subquery. The compile method seems to format the subquery for inclusion in the main query.</p>"},{"location":"query/expressions/#query-result-expressions","title":"Query Result Expressions","text":""},{"location":"query/expressions/#scalarsubquery","title":"<code>ScalarSubQuery</code>","text":"<p>Inherits from SubQueryExpression. The details aren't fully visible, but this might represent a subquery that returns a scalar value.</p>"},{"location":"query/expressions/#vectorsubqueryexpression","title":"<code>VectorSubQueryExpression</code>","text":"<p>Inherits from both SubQueryExpression and IterableExpression. This class likely represents subqueries that return a list or array of results.</p>"},{"location":"query/expressions/#modification-variables","title":"Modification Variables","text":""},{"location":"query/expressions/#new","title":"<code>NEW</code>","text":"<p>A subclass of ModificationVariable representing the \"NEW\" keyword in <code>AQL</code>, which might be used to refer to the new version of a document after an update or replace operation.</p>"},{"location":"query/expressions/#old","title":"<code>OLD</code>","text":"<p>A subclass of ModificationVariable represents the \"OLD\" keyword in <code>AQL</code>, likely referring to the previous version of a document before an update or replace operation.</p>"},{"location":"query/expressions/#sort-expressions","title":"Sort Expressions","text":""},{"location":"query/expressions/#sortexpression","title":"<code>SortExpression</code>","text":"<p>Represents a <code>SORT</code> expression in <code>AQL</code>. This class handles sorting of query results.</p>"},{"location":"query/expressions/#sortdirection","title":"SortDirection","text":"<p>An enumeration defining sorting directions - ASC for ascending and DESC for descending.</p>"},{"location":"query/expressions/#abstract-expressions","title":"Abstract Expressions","text":""},{"location":"query/expressions/#expression","title":"<code>Expression</code>","text":"<p>An abstract base class for all types of expressions. It mandates an abstract method compile which would be essential for turning the Pythonic expression into <code>AQL</code> syntax.</p>"},{"location":"query/expressions/#bindableexpression","title":"<code>BindableExpression</code>","text":"<p>A subclass of Expression which appears to represent expressions that can be bound to specific values.</p>"},{"location":"query/expressions/#returnableexpression","title":"<code>ReturnableExpression</code>","text":"<p>An abstract base class representing returnable expressions. This might be a base for expressions that can be part of the RETURN statement in <code>AQL</code>.</p>"},{"location":"query/expressions/#iterableexpression","title":"<code>IterableExpression</code>","text":"<p>An abstract base class that represents an iterable expressions in AQL.</p>"},{"location":"query/expressions/#modificationvariable","title":"<code>ModificationVariable</code>","text":"<p>Subclasses: <code>VariableExpression</code></p> <p>variables used in modification queries (like <code>UPDATE</code>, <code>INSERT</code>, <code>UPSERT</code>, <code>REPLACE</code>).</p>"},{"location":"query/expressions/#returnableiterableexpression","title":"<code>ReturnableIterableExpression</code>","text":"<p>Subclasses:</p> <ul> <li><code>IterableExpression</code></li> <li><code>ReturnableExpression</code></li> </ul> <p>This class marks that some iterable expressions can be returned in AQL queries.</p>"},{"location":"query/expressions/#unaryexpression","title":"<code>UnaryExpression</code>","text":"<p>Represents unary operations in AQL queries, like NOT or negation.</p>"},{"location":"query/expressions/#binaryexpression","title":"<code>BinaryExpression</code>","text":"<p>Represents binary operations in AQL queries, such as arithmetic operations (like addition or multiplication) or logical operations (like <code>AND</code> or <code>OR</code>).</p>"},{"location":"query/expressions/#logicalexpression","title":"<code>LogicalExpression</code>","text":"<p>An abstract base class representing logical expressions in AQL queries. This serves as a foundational class for both unary and binary logical operations.</p>"},{"location":"query/expressions/#basearithmeticexpression","title":"<code>BaseArithmeticExpression</code>","text":"<p>Abstract base class for arithmetic operations</p>"},{"location":"query/functions/","title":"Functions","text":""},{"location":"query/functions/#abstract-functions","title":"Abstract Functions","text":""},{"location":"query/functions/#basefunctionexpression","title":"<code>BaseFunctionExpression</code>","text":"<p>This is an abstract base class that represents a generic AQL function. handles the compilation of the function into its AQL representation. Takes a function name and a list of arguments.</p> <p>Converts dictionaries and lists to their respective ObjectExpression and ListExpression representations.</p>"},{"location":"query/functions/#functionexpression","title":"<code>FunctionExpression</code>","text":"<p>Subclasses:</p> <ul> <li><code>BaseFunctionExpression</code></li> <li><code>ReturnableExpression</code></li> </ul> <p>It represents an AQL function that can be used/returned in a query. It enforces that a valid function name is provided.</p>"},{"location":"query/functions/#returnsarray","title":"<code>ReturnsArray</code>","text":"<p>An abstract base class that mark functions that return arrays.</p>"},{"location":"query/functions/#document-functions","title":"Document Functions","text":""},{"location":"query/functions/#document","title":"<code>Document</code>","text":"<p>Represent the DOCUMENT AQL function, which retrieves a document by its ID.</p>"},{"location":"query/functions/#unset","title":"<code>Unset</code>","text":"<p>Represent the UNSET AQL function.</p> <pre><code>UNSET(document, attributeName1, attributeName2, ... attributeNameN)\n</code></pre> <p>Remove the attributes <code>attributeName1</code> to <code>attributeNameN</code> from document. All other attributes will be preserved.</p>"},{"location":"query/functions/#merge","title":"<code>Merge</code>","text":"<p>Represents the MERGE AQL function.</p> <pre><code>MERGE(document1, document2, ... documentN)\n</code></pre> <p>Merge the documents <code>document1</code> to <code>documentN</code> into a single document.</p>"},{"location":"query/functions/#has","title":"<code>Has</code>","text":"<p>Represents the HAS AQL function.</p> <pre><code>HAS(document, attributeName)\n</code></pre> <p>This function checks if an attribute exists in a given document.</p>"},{"location":"query/functions/#listarray-functions","title":"List/Array Functions","text":""},{"location":"query/functions/#length","title":"<code>Length</code>","text":"<p>Represents the LENGTH AQL function.</p> <pre><code>LENGTH(anyArray)\n</code></pre> <p>It has some additional functionality that allows arithmetic operations like addition and subtraction on the result.</p>"},{"location":"query/functions/#append","title":"<code>Append</code>","text":"<p>Represents the APPEND AQL function. This function appends a value to an array.</p>"},{"location":"query/functions/#concat","title":"<code>Concat</code>","text":"<p>Represents the CONCAT AQL function. It concatenates multiple arrays into one.</p>"},{"location":"query/functions/#count","title":"<code>Count</code>","text":"<p>Represents the COUNT AQL function. It counts the number of items in an array.</p>"},{"location":"query/functions/#numeric-functions","title":"Numeric Functions","text":""},{"location":"query/functions/#sum","title":"<code>Sum</code>","text":"<p>Represents the <code>SUM</code> AQL function.</p>"},{"location":"query/functions/#string-functions","title":"String Functions","text":""},{"location":"query/functions/#regexmatch","title":"<code>RegExMatch</code>","text":"<p>Represents the REGEX_MATCHES AQL function. This function matches a string against a regular expression pattern.</p>"},{"location":"query/functions/#misc-functions","title":"Misc Functions","text":""},{"location":"query/functions/#collectionsexpression","title":"<code>CollectionsExpression</code>","text":"<pre><code>COLLECTIONS()\n</code></pre> <p>Represents the COLLECTIONS AQL function. This function likely retrieves information about all collections.</p>"},{"location":"query/operations/","title":"Operations","text":""},{"location":"query/operations/#foroperation","title":"ForOperation","text":"<p>Represents the FOR operation in AQL, used to loop over sets of documents in a collection or the results of a subquery. The class:</p> <p>Takes parameters like <code>collection</code> or <code>variable</code> and <code>in</code> which specify what to loop over. Contains an optional <code>LoopOptions</code> parameter that can be used to specify loop-related options.</p>"},{"location":"query/operations/#filteroperation","title":"FilterOperation","text":"<p>Represents the FILTER operation in AQL, used to filter the results of a query based on a condition.</p>"},{"location":"query/operations/#sortoperation","title":"SortOperation","text":"<p>Represents the SORT operation in AQL, used to sort the results of a query.</p> <p>The class can handle multiple sorts, specified as a list. Each item in the list can be:</p> <ul> <li><code>FieldExpression</code></li> <li>tuple consisting of a field and sort direction. (\"field\", SortDirection.ASC)</li> </ul>"},{"location":"query/operations/#insertoperation","title":"InsertOperation","text":"<p>Represents the <code>INSERT</code> operation in AQL. This operation is used to insert a document into a collection.</p> <p>It requires a doc parameter (the document to insert) and a collection parameter (the target collection). The document can be provided as a dictionary, which is then converted to an ObjectExpression.</p>"},{"location":"query/operations/#removeoperation","title":"RemoveOperation","text":"<p>Represents the REMOVE operation in AQL, which is used to remove a document from a collection.</p> <p>The class sets:</p> <ul> <li><code>expression</code>: <code>Union[str, dict, LiteralExpression, FieldExpression, VariableExpression, ObjectExpression]</code>,</li> <li><code>collection</code>: <code>Union[str, CollectionExpression]</code></li> <li><code>options</code>: <code>Optional[RemoveOptions]</code>.</li> </ul>"},{"location":"query/operations/#updateoperation","title":"UpdateOperation","text":"<p>Subclasses:</p> <ul> <li><code>BaseChangeOperation</code></li> </ul> <p>Represents the UPDATE operation in AQL.</p> <p>The parameters can be provided as dictionaries or <code>ObjectExpression</code> The class sets:</p> <ul> <li><code>key</code>: <code>str</code> or <code>LiteralExpression</code></li> <li><code>obj</code>: <code>dict</code> or <code>ObjectExpression</code></li> <li><code>collection</code> : <code>str</code> or <code>CollectionExpression</code></li> <li><code>options</code>: an optional <code>UpdateOptions</code> parameter that can be used to specify update-related options.</li> </ul>"},{"location":"query/operations/#replaceoperation","title":"ReplaceOperation","text":"<p>Subclasses:</p> <ul> <li><code>BaseChangeOperation</code></li> </ul> <p>The class sets:</p> <ul> <li><code>key</code>: <code>str</code> or <code>LiteralExpression</code></li> <li><code>obj</code>: <code>dict</code> or <code>ObjectExpression</code></li> <li><code>collection</code> : <code>str</code> or <code>CollectionExpression</code></li> <li><code>options</code>: an optional <code>ReplaceOptions</code> parameter that can be used to specify update-related options.</li> </ul> <p>Represents the REPLACE operation in AQL The initialization parameters are the same as BaseChangeOperation.</p>"},{"location":"query/operations/#upsertoperation","title":"UpsertOperation","text":"<p>Represents the UPSERT operation in AQL. This operation is used to insert a document if it doesn't exist or update/replace it if it does.</p> <p>the class sets:</p> <ul> <li><code>filter_</code>: the condition to match</li> <li><code>collection</code>: the target collection</li> <li><code>insert</code>: the document to insert if no match is found and either</li> <li><code>update</code>: the data to update if a match is found</li> <li><code>replace</code>: the document to replace if a match is found</li> <li><code>options</code>: an optional <code>UpsertOptions</code> parameter that can be used to specify upsert-related options.</li> </ul>"},{"location":"query/operations/#letoperation","title":"LetOperation","text":"<p>Represents the LET operation in AQL, which allows for the assignment of a value to a variable within a query.</p>"},{"location":"query/operations/#returnoperation","title":"ReturnOperation","text":"<p>Represents the RETURN operation in AQL.</p> <p>Takes a return_expr parameter that specifies what to return. It can be a:</p> <ul> <li>collection</li> <li>list</li> <li>dictionary   The <code>distinct</code> parameter allows for returning distinct values.</li> </ul>"},{"location":"query/operations/#limitoperation","title":"LimitOperation","text":"<p>Represents the LIMIT operation in AQL, used to limit the number of results returned by a query.</p> <p>Takes parameters like <code>limit</code> and <code>offset</code> to specify the number of results and the starting point.</p>"},{"location":"query/operations/#collectoperation","title":"CollectOperation","text":"<p>Represents the COLLECT operation in AQL, which is used to group/aggregate results.</p> <p>The class is initialized with various parameters, including:</p> <ul> <li><code>collect</code>: Specifies the criteria for grouping results.</li> <li><code>aggregate</code>: Specifies aggregate calculations to be performed on grouped results.</li> <li><code>into</code>: Specifies the variable into which the grouped results are collected.</li> <li><code>keep</code>: Specifies which variables to keep after the COLLECT operation.</li> <li><code>with_count_into</code>: Specifies a variable that will store the number of grouped results.</li> <li><code>options</code>: an optional <code>CollectOptions</code> parameter that can be used to specify upsert-related options.</li> </ul> <p>The compile method translates the COLLECT operation into its AQL representation, incorporating the grouping criteria, aggregation calculations, and other parameters.</p>"},{"location":"query/operations/#traversaloperation","title":"TraversalOperation","text":"<p>Represents the graph traversal operation in AQL.</p>"},{"location":"query/operations/#traversaldirection","title":"TraversalDirection","text":"<p>An enumeration representing the traversal direction options in AQL graph queries. The options include:</p> <ul> <li><code>OUTBOUND</code></li> <li><code>INBOUND</code></li> <li><code>ANY</code></li> </ul>"},{"location":"query/operations/#abstract-operations","title":"Abstract Operations","text":""},{"location":"query/operations/#operation","title":"Operation","text":"<p>This is an abstract base class representing a generic AQL operation. The class:</p> <p>Contains a <code>query_ref</code> attribute which refers to the broader query that the operation is a part of. Provides an abstract compile method that subclasses need to implement to translate the operation into its AQL representation.</p>"},{"location":"query/operations/#basechangeoperation","title":"BaseChangeOperation","text":"<p>This is an abstract base class that provides common functionality for operations that change data in collections (e.g., UPDATE, REPLACE).</p>"},{"location":"query/operations/#not-implemented-yet","title":"Not Implemented Yet","text":""},{"location":"query/operations/#windowoperation","title":"WindowOperation","text":"<p>Represents the WINDOW operation in AQL, which is used for windowed calculations on results.</p>"},{"location":"query/operations/#withoperation","title":"WithOperation","text":"<p>Represents the WITH operation in AQL.</p>"},{"location":"query/options/","title":"Options","text":"<p>A Base class representing general AQL options. Some AQL Operations have options that can be passed to them. to configure how the operation is performed.</p>"},{"location":"query/options/#loopoptions","title":"LoopOptions","text":"<p>Represents options specific to loops in AQL. The options include:</p> <ul> <li><code>index_hint</code>: A hint for which index to use.</li> <li><code>force_index_hint</code>: Whether to force the use of the index hint.</li> <li><code>disable_index</code>: If set, disables the use of indexes.</li> <li><code>max_projections</code>: Maximum number of projections.</li> <li><code>use_cache</code>: Indicates if caching should be used.</li> <li><code>look_ahead</code>: The number of lookahead operations.</li> </ul>"},{"location":"query/options/#modificationoptions","title":"ModificationOptions","text":""},{"location":"query/options/#basemodificationoptions","title":"BaseModificationOptions","text":"<p>An abstract base class representing options for modification operations in AQL. The options include:</p> <ul> <li><code>ignore_errors</code>: Whether to ignore errors.</li> <li><code>wait_for_sync</code>: If set, waits for synchronization.</li> <li><code>ignore_revs</code>: Ignores revisions.</li> <li><code>exclusive</code>: Not fully described in the current snippet.</li> <li><code>refill_index_caches</code>: Refills index caches if set.</li> </ul>"},{"location":"query/options/#removeoptions","title":"RemoveOptions","text":"<p>Subclasses:</p> <ul> <li><code>BaseModificationOptions</code></li> </ul> <p>Represents options for the remove operation in AQL.</p>"},{"location":"query/options/#updateoptions","title":"UpdateOptions","text":"<p>Subclasses:</p> <ul> <li><code>BaseModificationOptions</code></li> </ul> <p>The options include:</p> <ul> <li><code>keep_null</code>: If set, retains null values.</li> <li><code>merge_objects</code>: If set, merges objects.</li> <li><code>refill_index_caches</code>: Refills index caches if set.</li> </ul>"},{"location":"query/options/#replaceoptions","title":"ReplaceOptions","text":"<p>Subclasses:</p> <ul> <li><code>BaseModificationOptions</code></li> </ul> <p>Represents options for the replace operation in AQL.</p>"},{"location":"query/options/#upsertoption","title":"UpsertOption","text":"<p>Subclasses:</p> <ul> <li><code>BaseModificationOptions</code></li> </ul> <p>The options include:</p> <ul> <li><code>index_hint</code>: hint for which index to use.</li> </ul>"},{"location":"query/options/#collectoptions","title":"CollectOptions","text":"<p>Represents options specific to the COLLECT operation in AQL. The options include:</p> <ul> <li><code>method</code>: Specifies the method used for the COLLECT operation <code>CollectMethod</code></li> </ul>"},{"location":"query/options/#collectmethod","title":"CollectMethod","text":"<p>An enumeration representing the method used for the COLLECT operation in AQL. The values include:</p> <ul> <li><code>SORTED</code></li> <li><code>HASHED</code></li> </ul>"},{"location":"query/query/","title":"Query","text":"<p>The pydango/query package provides a comprehensive and Pythonic interface for constructing and executing queries on ArangoDB. It abstracts the complexities of direct AQL (ArangoDB Query Language) and offers a structured approach to build both simple and complex queries with ease.</p>"},{"location":"query/query/#aqlquery","title":"AQLQuery","text":""},{"location":"query/query/#introduction","title":"Introduction","text":"<p>The <code>AQLQuery</code> class offers a flexible and Pythonic interface for constructing, managing, and preparing AQL queries. It provides methods corresponding to a variety of AQL operations, allowing users to create complex queries by chaining these operations together.</p>"},{"location":"query/query/#class-attributes","title":"Class Attributes:","text":"<ul> <li><code>_ops</code>: A list of operations associated with the query.</li> <li><code>sep</code>: Specifies the separator between different parts of the query.</li> <li><code>bind_vars</code>, <code>compiled_vars</code>, <code>__dynamic_vars__</code>, <code>__used_vars__</code>: Various attributes related to variables and their management within the query.</li> <li><code>_parameters</code>: Holds query parameters.</li> <li><code>_var_counter</code>, <code>_param_counter</code>: Counters for generating unique variable and parameter names.</li> <li><code>parent</code>: Reference to a parent <code>AQLQuery</code>, if any.</li> <li><code>__is_modification_query__</code>: Boolean indicating if the query modifies data.</li> </ul>"},{"location":"query/query/#methods","title":"Methods:","text":""},{"location":"query/query/#for_","title":"<code>for_</code>","text":"<p><code>for_(self, collection_or_variable, in_: Expression) -&gt; 'AQLQuery'</code> Adds a <code>FOR</code> operation to the query.  Iterates over a collection or variable.</p>"},{"location":"query/query/#filter","title":"<code>filter</code>","text":"<p><code>filter(self, filter_expr: Expression) -&gt; 'AQLQuery'</code> Adds a <code>FILTER</code> operation to the query. Filters the results of a query based on a condition.</p>"},{"location":"query/query/#sort","title":"<code>sort</code>","text":"<p><code>sort(self, *args: Expression) -&gt; 'AQLQuery'</code> Adds a <code>SORT</code> operation to the query. Sorts the results of a query based on provided parameters.</p>"},{"location":"query/query/#let","title":"<code>let</code>","text":"<p><code>let(self, variable: Union[str, VariableExpression], value: Expression) -&gt; Union[VariableExpression, 'AQLQuery']</code> Adds a <code>LET</code> operation to the query. Defines a variable within the query.</p>"},{"location":"query/query/#return_","title":"<code>return_</code>","text":"<p><code>return_(self, return_expr: Expression) -&gt; 'AQLQuery'</code> Adds a <code>RETURN</code> operation to the query. Specifies the return value of the query.</p>"},{"location":"query/query/#limit","title":"<code>limit</code>","text":"<p><code>limit(self, limit: int, offset: Optional[int] = None) -&gt; 'AQLQuery'</code> Adds a <code>LIMIT</code> operation to the query. Limits the number of results returned by the query.</p>"},{"location":"query/query/#insert","title":"<code>insert</code>","text":"<p><code>insert(self, doc: Dict[str, Any], collection: str) -&gt; 'AQLQuery'</code> Adds an <code>INSERT</code> operation to the query. Inserts a document into a collection.</p>"},{"location":"query/query/#remove","title":"<code>remove</code>","text":"<p><code>remove(...) -&gt; 'AQLQuery'</code> Adds a <code>REMOVE</code> operation to the query. Removes documents from a collection.</p>"},{"location":"query/query/#update","title":"<code>update</code>","text":"<p><code>update(...) -&gt; 'AQLQuery'</code> Adds an <code>UPDATE</code> operation to the query. Updates documents in a collection.</p>"},{"location":"query/query/#replace","title":"<code>replace</code>","text":"<p><code>replace(...) -&gt; 'AQLQuery'</code> Adds a <code>REPLACE</code> operation to the query. Replaces documents in a collection.</p>"},{"location":"query/query/#upsert","title":"<code>upsert</code>","text":"<p><code>upsert(...) -&gt; 'AQLQuery'</code> Adds an <code>UPSERT</code> operation to the query. Inserts or updates documents in a collection.</p>"},{"location":"query/query/#collect","title":"<code>collect</code>","text":"<p><code>collect(...) -&gt; 'AQLQuery'</code> Adds a <code>COLLECT</code> operation to the query. Collects documents from a collection.</p>"},{"location":"query/query/#traverse","title":"<code>traverse</code>","text":"<p><code>traverse(...) -&gt; 'AQLQuery'</code> Creates a <code>TRAVERSE</code> operation. Traverses a graph.</p>"},{"location":"query/query/#prepare","title":"<code>prepare</code>","text":"<p><code>prepare() -&gt; PreparedQuery</code> Prepares the query for execution, returning a <code>PreparedQuery</code> instance.</p>"},{"location":"query/query/#preparedquery","title":"PreparedQuery","text":""},{"location":"query/query/#introduction_1","title":"Introduction","text":"<p>The PreparedQuery class represents a prepared AQL query ready for execution against an ArangoDB instance. It encapsulates the AQL query string and any bind variables that need to be provided alongside the query.</p>"},{"location":"query/query/#class-attributes_1","title":"Class Attributes:","text":"<ul> <li><code>query</code>: A string that holds the AQL query.</li> <li><code>bind_vars</code>: A dictionary of variables to be bound to the query. These are represented in a JSON-compatible format.</li> </ul>"},{"location":"query/usage/","title":"Usage","text":""},{"location":"query/usage/#aqlquery","title":"AQLQuery","text":""},{"location":"query/usage/#1-simple-query-to-fetch-data","title":"1. Simple Query to Fetch Data","text":"<pre><code>from pydango.query import AQLQuery\n# Constructing a query to fetch all users from the \"users\" collection\nquery = AQLQuery().for_(\"user\", \"users\").return_(\"user\")\n# Preparing and printing the query\nprepared = query.prepare()\nprint(prepared.query)\n</code></pre> <p>Equivalent to:</p> <pre><code>from pydango.query import AQLQuery\nfrom pydango.query.expressions import IteratorExpression, CollectionExpression\n# Constructing a query to fetch all users from the \"users\" collection\niterator = IteratorExpression(\"user\")\nquery = AQLQuery().for_(iterator, CollectionExpression(\"users\")).return_(iterator)\n# Preparing and printing the query\nprepared = query.prepare()\nprint(prepared.query)\n</code></pre>"},{"location":"query/usage/#2-filtering-data-with-conditions","title":"2. Filtering Data with Conditions","text":"<pre><code>from pydango.query.expressions import IteratorExpression\n# Fetching users aged 30 from the \"users\" collection\nuser = IteratorExpression(\"user\")\nquery = AQLQuery().for_(user, \"users\").filter(user.age == 30).return_(user)\n# Preparing and printing the query\nprepared = query.prepare()\nprint(prepared.query)\n</code></pre>"},{"location":"query/usage/#3-sorting-and-limiting-results","title":"3. Sorting and Limiting Results","text":"<pre><code>from pydango.query.expressions import IteratorExpression\nfrom pydango.query.operations import AQLQuery\n# Fetching top 10 users sorted by their names\nuser = IteratorExpression(\"user\")\nquery = AQLQuery().for_(user, \"users\").sort(+user.name).limit(10).return_(user)\n# Preparing and printing the query\nprepared = query.prepare()\nprint(prepared.query)\n</code></pre>"},{"location":"query/usage/#4-inserting-data","title":"4. Inserting Data","text":"<pre><code>from pydango.query.expressions import NEW\nfrom pydango.query.operations import AQLQuery\nnew_user = {\"name\": \"John Doe\", \"age\": 25, \"email\": \"john@example.com\"}\n# Inserting a new user into the \"users\" collection\nquery = AQLQuery().insert(new_user, \"users\").return_(NEW()._id)\n# Preparing and printing the query\nprepared = query.prepare()\nprint(prepared.query)\n</code></pre>"},{"location":"query/usage/#5-complex-query-aggregation-and-grouping","title":"5. Complex Query: Aggregation and Grouping","text":"<pre><code>from pydango.query.expressions import VariableExpression, AssignmentExpression\nfrom pydango.query.operations import AQLQuery\nuser = VariableExpression(\"users\")\ncategory_collect = VariableExpression(\"categoryCollect\")\ngroups = VariableExpression(\"groups\")\n# Grouping users by category\nquery = (\nAQLQuery()\n.for_(user, \"users\")\n.collect(collect=AssignmentExpression(category_collect, user.category), into=groups)\n.return_({\"groups\": groups, \"categories\": category_collect})\n)\n# Preparing and printing the query\nprepared = query.prepare()\nprint(prepared.query)\n</code></pre>"}]}